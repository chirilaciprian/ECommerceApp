// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String?
  address   String?
  Order     Order[]
  cart      Cart?
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  Products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id           String      @id @default(cuid())
  name         String      @unique
  price        Float
  images       String[]
  genre        String?
  category     Category    @relation(fields: [categoryId], references: [id])
  categoryId   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  rating       Float?
  manufacturer String
  description  String?
  onSale       Boolean
  salePrice    Float?
  cartItems    CartItem[]
  orderItems   OrderItem[]
}

model Order {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id])
  totalPrice Float?
  userId     String
  status     String
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  phone      String
  address    String
  city       String
  postalCode String
  state      String
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Cart {
  id         String     @id @default(cuid())
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [id])
  totalPrice Float?
  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}
